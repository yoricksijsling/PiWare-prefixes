open import PiWare.Atom using (Atomic; module Atomic)
open import PiWare.Gates using (Gates)

module PiWarePrefixes.Patterns.Core {At : Atomic} (Gt : Gates At) where

open import Data.Fin as Fin using (Fin)
open import Data.Nat using (‚Ñï; zero; suc; _*_; _+_)
open import Data.Nat.Properties.Simple using (+-right-identity; *-comm)
open import Data.Product renaming (map to map√ó)
open import Data.Vec hiding (zipWith) renaming (map to map·µ•)
open import Function using (id; _$_; _‚àò_; flip)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; sym; cong; cong‚ÇÇ)

open import PiWare.Circuit {Gt = Gt} using (‚ÑÇ; ùêÇ; Plug; _‚ü´_; _‚à•_)
open import PiWare.Interface using (Ix)
open import PiWare.Patterns Gt using (parsN)
open import PiWare.Plugs Gt using (id‚§®)

open Atomic At using (W; Atom)

{-
zipWith : ‚àÄ {k n cs} ‚Üí ‚ÑÇ {cs} k 1 ‚Üí ‚ÑÇ {cs} (k * n) (1 * n)
zipWith {k} {n} f with (zip‚§® {k} {n} ‚ü´ parsN {n} f)
zipWith {k} {n} f | z rewrite *-comm n 1 | +-right-identity n = z
-}
