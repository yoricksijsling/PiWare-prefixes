open import PiWare.Atom using (Atomic; module Atomic)
open import PiWare.Gates using (Gates)

module PiWarePrefixes.Patterns.Core {At : Atomic} (Gt : Gates At) where

open import Data.Fin as Fin using (Fin)
open import Data.Nat using (‚Ñï; zero; suc; _*_; _+_)
open import Data.Nat.Properties.Simple using (+-right-identity; *-comm)
open import Data.Product renaming (map to map√ó) --using (uncurry; _,_; <_,_>)
open import Data.Vec hiding (zipWith) renaming (map to map·µ•)
open import Function using (id; _$_; flip)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; sym; cong; cong‚ÇÇ)

open import PiWare.Circuit Gt using (‚ÑÇ; ùêÇ; Plug; _‚ü´_; _‚à•_)
open import PiWarePrefixes.MinGroups using (ExtractInsert; size)
open import PiWare.Patterns Gt using (parsN)
import PiWarePrefixes.Patterns.Stretch Gt as Stretch
open import PiWare.Plugs Gt using (id‚§®)
open import PiWarePrefixes.Plugs.Core Gt using (zip‚§®)
open import PiWarePrefixes.Utils using (‚à∑ ≥-injective)

open Atomic At using (W; Atom)


zipWith : ‚àÄ {k n cs} ‚Üí ‚ÑÇ {cs} k 1 ‚Üí ‚ÑÇ {cs} (k * n) (1 * n)
zipWith {k} {n} f with (zip‚§® {k} {n} ‚ü´ parsN {n} f)
zipWith {k} {n} f | z rewrite *-comm n 1 | +-right-identity n = z

‚§ô-direction : ExtractInsert
‚§ô-direction = record
  { extf = record { op = < head , tail > ; op-<$> = extf-op-<$> }
  ; insf = record { op = uncurry _‚à∑_ ; op-<$> = Œª f x ‚Üí refl }
  ; extf-insf-id = extf-insf-id
  ; insf-extf-id = insf-extf-id
  }
  where
  extf-op-<$> : ‚àÄ {n} {X Y : Set} (f : X ‚Üí Y) (x : Vec X (suc n)) ‚Üí
                (head (f ‚à∑ replicate f ‚äõ x) , tail (f ‚à∑ replicate f ‚äõ x)) ‚â°
                (f (head x) , (replicate f ‚äõ tail x))
  extf-op-<$> f (x ‚à∑ _) = cong (_,_ (f x)) refl
  extf-insf-id : {A : Set} {n : ‚Ñï} (xs : Vec A (suc n)) ‚Üí head xs ‚à∑ tail xs ‚â° xs
  extf-insf-id (_ ‚à∑ _) = refl
  insf-extf-id : {A : Set} {n : ‚Ñï} (x : A √ó Vec A n) ‚Üí (proj‚ÇÅ x , proj‚ÇÇ x) ‚â° x
  insf-extf-id (_ , _) = refl

_‚§ô_ : ‚àÄ {n cs} ‚Üí ‚ÑÇ {cs} n n ‚Üí (as : Vec ‚Ñï n) ‚Üí ‚ÑÇ {cs} (size 1 as) (size 1 as)
_‚§ô_ = Stretch.WithDirection.stretch ‚§ô-direction


‚§ö-direction : ExtractInsert
‚§ö-direction = record
  { extf = record { op = < last , init > ; op-<$> = extf-op-<$> }
  ; insf = record { op = uncurry (flip _‚à∑ ≥_) ; op-<$> = Œª f ‚Üí uncurry (insf-op-<$> f) }
  ; extf-insf-id = extf-insf-id
  ; insf-extf-id = uncurry insf-extf-id
  }
  where
  extf-insf-id : {A : Set} {n : ‚Ñï} (xs : Vec A (suc n)) ‚Üí init xs ‚à∑ ≥ last xs ‚â° xs
  extf-insf-id xs with initLast xs
  extf-insf-id .(xs ‚à∑ ≥ x) | xs , x , refl = refl

  insf-extf-id : {A : Set} {n : ‚Ñï} (x : A) (xs : Vec A n) ‚Üí last (xs ‚à∑ ≥ x) , init (xs ‚à∑ ≥ x) ‚â° x , xs
  insf-extf-id x xs with initLast (xs ‚à∑ ≥ x)
  insf-extf-id x xs | ys , y , p with ‚à∑ ≥-injective xs ys p
  insf-extf-id x xs | ys , y , p | xs=ys , x=y rewrite p | x=y | xs=ys = refl

  postulate
    extf-op-<$> : ‚àÄ {n} {X Y : Set} (f : X ‚Üí Y) (xs : Vec X (suc n)) ‚Üí
      last (map·µ• f xs) , init (map·µ• f xs) ‚â° f (last xs) , (map·µ• f (init xs))
    insf-op-<$> : ‚àÄ {n} {X Y : Set} (f : X ‚Üí Y) (x : X) (xs : Vec X n) ‚Üí
      map·µ• f xs ‚à∑ ≥ f x ‚â° map·µ• f (xs ‚à∑ ≥ x)

_‚§ö_ : ‚àÄ {n cs} ‚Üí (as : Vec ‚Ñï n) ‚Üí ‚ÑÇ {cs} n n ‚Üí ‚ÑÇ {cs} (size 1 as) (size 1 as)
_‚§ö_ = flip (Stretch.WithDirection.stretch ‚§ö-direction)
