open import PiWare.Atom using (Atomic; module Atomic)
open import PiWare.Gates using (Gates)

module PiWarePrefixes.Patterns.Stretch {At : Atomic} {Gt : Gates At} where

open import Category.Functor using (module RawFunctor)
open import Data.Fin as Fin using (Fin; to‚Ñï)
open import Data.Nat using (‚Ñï; zero; suc; _*_; _+_; _<_; s‚â§s)
open import Data.Nat.Properties as NP using (m‚â§m+n)
open import Data.Nat.Properties.Simple using (+-suc; +-right-identity; +-assoc; +-comm; *-comm)
open import Data.Product renaming (zip to zip√ó; map to map√ó)
open import Data.Vec renaming (map to map·µ•; applicative to vec-applicative) hiding (group)
open import Data.Vec.Extra
open import Data.Vec.Properties as VecProps
open import Function using (id; _$_; flip; const; _‚àò_; _‚àò‚Ä≤_)
open import Relation.Binary.PropositionalEquality

open import PiWare.Circuit {Gt = Gt} using (‚ÑÇ; ùêÇ; Plug; _‚ü´_; _‚à•_)
open import PiWarePrefixes.MinGroups as MinGroups
open import PiWare.Patterns Gt using (parsN)
open import PiWare.Plugs Gt using (id‚§®)
open import PiWarePrefixes.Plugs.Core using (plug-FM)
open import PiWare.Simulation Gt using (‚ü¶_‚üß)
open import PiWarePrefixes.Utils

open Atomic At using (W; Atom)
open RawFunctor
open Morphism using (op; op-<$>)

private
  import Data.Vec.Equality
  import Data.Vec.Properties
  module VE = Data.Vec.Equality.PropositionalEquality
  module VecPropEq {a} {A : Set a} = Data.Vec.Properties.UsingVectorEquality (Relation.Binary.PropositionalEquality.setoid A)


module WithDirection (extract-insert : ExtractInsert) where
  open MinGroups.WithExtractInsert extract-insert
  
  in-table : ‚àÄ {A : Set} {n} (as : Vec ‚Ñï n) ‚Üí
             Vec A (size 1 as) ‚Üí Vec A (n + size 0 as)
  in-table as = uncurry _++_ ‚àò map√ó id ungroup ‚àò extract ‚àò group 1 as

  in-FM : ‚àÄ {n} (as : Vec ‚Ñï n) ‚Üí Morphism (vec-functor (size 1 as)) (vec-functor (n + size 0 as))
  in-FM as = record { op = in-table as ; op-<$> = in-<$> as }
    where
    postulate
      -- Free property by parametricity
      in-<$> : ‚àÄ {n} (as : Vec ‚Ñï n) {X Y} (f : X ‚Üí Y) (xs : Vec X (size 1 as)) ‚Üí
               in-table as (map·µ• f xs) ‚â° map·µ• f (in-table as xs)

  in-‚§® : ‚àÄ {n} (as : Vec ‚Ñï n) ‚Üí ùêÇ (size 1 as) (n + size 0 as)
  in-‚§® as = plug-FM (in-FM as)
  
  out-table : ‚àÄ {A : Set} {n} (as : Vec ‚Ñï n) ‚Üí
               Vec A (n + size 0 as) ‚Üí Vec A (size 1 as)
  out-table {n = n} as = ungroup ‚àò uncurry insert ‚àò map√ó id (group 0 as) ‚àò splitAt‚Ä≤ n

  out-FM : ‚àÄ {n} (as : Vec ‚Ñï n) ‚Üí Morphism (vec-functor (n + size 0 as)) (vec-functor (size 1 as))
  out-FM as = record { op = out-table as ; op-<$> = out-<$> as }
    where
    postulate
      -- Free property by parametricity
      out-<$> : ‚àÄ {n} (as : Vec ‚Ñï n) {X Y} (f : X ‚Üí Y) (xs : Vec X (n + size 0 as)) ‚Üí
               out-table as (map·µ• f xs) ‚â° map·µ• f (out-table as xs)
    
  out-‚§® : ‚àÄ {n} (as : Vec ‚Ñï n) ‚Üí ùêÇ (n + size 0 as) (size 1 as)
  out-‚§® as = plug-FM (out-FM as)
  
  stretch : ‚àÄ {n cs} ‚Üí ‚ÑÇ {cs} n n ‚Üí (as : Vec ‚Ñï n) ‚Üí ‚ÑÇ {cs} (size 1 as) (size 1 as)
  stretch {n} c as = in-‚§® as
                   ‚ü´ c ‚à• id‚§®
                   ‚ü´ out-‚§® as

‚§ô-direction : ExtractInsert
‚§ô-direction = record
  { extf = record { op = < head , tail > ; op-<$> = extf-op-<$> }
  ; insf = record { op = uncurry _‚à∑_ ; op-<$> = Œª f x ‚Üí refl }
  ; extf-insf-id = extf-insf-id
  ; insf-extf-id = insf-extf-id
  }
  where
  extf-op-<$> : ‚àÄ {n} {X Y : Set} (f : X ‚Üí Y) (x : Vec X (suc n)) ‚Üí
                (head (f ‚à∑ replicate f ‚äõ x) , tail (f ‚à∑ replicate f ‚äõ x)) ‚â°
                (f (head x) , (replicate f ‚äõ tail x))
  extf-op-<$> f (x ‚à∑ _) = cong (_,_ (f x)) refl
  extf-insf-id : {A : Set} {n : ‚Ñï} (xs : Vec A (suc n)) ‚Üí head xs ‚à∑ tail xs ‚â° xs
  extf-insf-id (_ ‚à∑ _) = refl
  insf-extf-id : {A : Set} {n : ‚Ñï} (x : A √ó Vec A n) ‚Üí (proj‚ÇÅ x , proj‚ÇÇ x) ‚â° x
  insf-extf-id (_ , _) = refl

infix 6 _‚§ô_
_‚§ô_ : ‚àÄ {n cs} ‚Üí ‚ÑÇ {cs} n n ‚Üí (as : Vec ‚Ñï n) ‚Üí ‚ÑÇ {cs} (size 1 as) (size 1 as)
_‚§ô_ = WithDirection.stretch ‚§ô-direction


‚§ö-direction : ExtractInsert
‚§ö-direction = record
  { extf = record { op = < last , init > ; op-<$> = extf-op-<$> }
  ; insf = record { op = uncurry (flip _‚à∑ ≥_) ; op-<$> = Œª f ‚Üí uncurry (insf-op-<$> f) }
  ; extf-insf-id = extf-insf-id
  ; insf-extf-id = uncurry insf-extf-id
  }
  where
  extf-insf-id : {A : Set} {n : ‚Ñï} (xs : Vec A (suc n)) ‚Üí init xs ‚à∑ ≥ last xs ‚â° xs
  extf-insf-id xs with initLast xs
  extf-insf-id .(xs ‚à∑ ≥ x) | xs , x , refl = refl

  insf-extf-id : {A : Set} {n : ‚Ñï} (x : A) (xs : Vec A n) ‚Üí last (xs ‚à∑ ≥ x) , init (xs ‚à∑ ≥ x) ‚â° x , xs
  insf-extf-id x xs with initLast (xs ‚à∑ ≥ x)
  insf-extf-id x xs | ys , y , p with ‚à∑ ≥-injective xs ys p
  insf-extf-id x xs | ys , y , p | xs=ys , x=y rewrite p | x=y | xs=ys = refl

  postulate
    extf-op-<$> : ‚àÄ {n} {X Y : Set} (f : X ‚Üí Y) (xs : Vec X (suc n)) ‚Üí
      last (map·µ• f xs) , init (map·µ• f xs) ‚â° f (last xs) , (map·µ• f (init xs))
    insf-op-<$> : ‚àÄ {n} {X Y : Set} (f : X ‚Üí Y) (x : X) (xs : Vec X n) ‚Üí
      map·µ• f xs ‚à∑ ≥ f x ‚â° map·µ• f (xs ‚à∑ ≥ x)

infix 6 _‚§ö_
_‚§ö_ : ‚àÄ {n cs} ‚Üí (as : Vec ‚Ñï n) ‚Üí ‚ÑÇ {cs} n n ‚Üí ‚ÑÇ {cs} (size 1 as) (size 1 as)
_‚§ö_ = flip (WithDirection.stretch ‚§ö-direction)

----------------------------------------

Stretching-‚ÑÇ : ‚àÄ {p} ‚Üí Set
Stretching-‚ÑÇ {p} = (‚àÉ Œª i ‚Üí ‚ÑÇ {p} (suc i) (suc i))

par-stretching : ‚àÄ {n p} (cs : Vec (Stretching-‚ÑÇ {p}) n) ‚Üí
     ‚ÑÇ {p} (size 1 (map·µ• proj‚ÇÅ cs)) (size 1 (map·µ• proj‚ÇÅ cs))
par-stretching [] = id‚§® {0}
par-stretching ((i , c) ‚à∑ cs) = c ‚à• (par-stretching cs)

infix 6 _‚§õ_
_‚§õ_ : ‚àÄ {n p} ‚Üí ‚ÑÇ {p} n n ‚Üí (cs : Vec (Stretching-‚ÑÇ {p}) n) ‚Üí
      ‚ÑÇ {p} (size 1 (map·µ• proj‚ÇÅ cs)) (size 1 (map·µ• proj‚ÇÅ cs))
_‚§õ_ f cs = f ‚§ô map·µ• proj‚ÇÅ cs ‚ü´ par-stretching cs

infix 6 _‚§ú_
_‚§ú_ : ‚àÄ {n p} ‚Üí (cs : Vec (Stretching-‚ÑÇ {p}) n) ‚Üí ‚ÑÇ {p} n n ‚Üí
      ‚ÑÇ {p} (size 1 (map·µ• proj‚ÇÅ cs)) (size 1 (map·µ• proj‚ÇÅ cs))
_‚§ú_ cs f = par-stretching cs ‚ü´ map·µ• proj‚ÇÅ cs ‚§ö f







--   --------------------------------------------------------------------------------
--   -- Lots of applicatives

  -- IdentityApplicative : ‚àÄ {f} ‚Üí RawApplicative {f = f} id
  -- IdentityApplicative = RawMonad.rawIApplicative IdentityMonad
  --   where
  --   open import Category.Monad
  --   open import Category.Monad.Identity
  
--   √ó-applicative : ‚àÄ {i f} {I : Set i} {F‚ÇÅ F‚ÇÇ : IFun I f}
--                   (A‚ÇÅ : RawIApplicative F‚ÇÅ) (A‚ÇÇ : RawIApplicative F‚ÇÇ) ‚Üí
--                   RawIApplicative (Œª i j x ‚Üí F‚ÇÅ i j x √ó F‚ÇÇ i j x)
--   √ó-applicative {F‚ÇÅ = F‚ÇÅ} {F‚ÇÇ} A‚ÇÅ A‚ÇÇ = record
--     { pure = < A‚ÇÅ.pure , A‚ÇÇ.pure >
--     -- ; _‚äõ_ = Œª { (f‚ÇÅ , f‚ÇÇ) (x‚ÇÅ , x‚ÇÇ) ‚Üí (f‚ÇÅ A‚ÇÅ.‚äõ x‚ÇÅ) , (f‚ÇÇ A‚ÇÇ.‚äõ x‚ÇÇ) }
--     ; _‚äõ_ = zip√ó A‚ÇÅ._‚äõ_ A‚ÇÇ._‚äõ_
--     }
--     where
--     module A‚ÇÅ = RawIApplicative A‚ÇÅ
--     module A‚ÇÇ = RawIApplicative A‚ÇÇ

--   ++-pure : ‚àÄ m {n ‚Ñì} {X : Set ‚Ñì} ‚Üí (x : X) ‚Üí replicate {n = m} x ++ replicate {n = n} x ‚â° replicate {n = m + n} x
--   ++-pure zero x = refl
--   ++-pure (suc m) x = cong (_‚à∑_ _) (++-pure m x)
  
--   ++-‚äõ : ‚àÄ {m n ‚Ñì} {X Y : Set ‚Ñì} (fs : Vec (X ‚Üí Y) m) (gs : Vec (X ‚Üí Y) n) ‚Üí
--                                  (xs : Vec X m) (ys : Vec X n) ‚Üí 
--                                  (fs ‚äõ xs) ++ (gs ‚äõ ys) ‚â° (fs ++ gs) ‚äõ (xs ++ ys)
--   ++-‚äõ {zero} [] gs [] ys = refl
--   ++-‚äõ {suc n} (f ‚à∑ fs) gs (x ‚à∑ xs) ys = cong (_‚à∑_ (f x)) (++-‚äõ fs gs xs ys)

--   ++-morphism : ‚àÄ {f m n} ‚Üí Morphism {f = f} (√ó-applicative (vec-applicative {_} {m}) (vec-applicative {_} {n}))
--                                              (vec-applicative {_} {m + n})
--   ++-morphism {m = m} = record
--     { op = uncurry _++_
--     ; op-pure = ++-pure m
--     ; op-‚äõ = Œª { (f‚ÇÅ , f‚ÇÇ) (x‚ÇÅ , x‚ÇÇ) ‚Üí ++-‚äõ f‚ÇÅ f‚ÇÇ x‚ÇÅ x‚ÇÇ }
--     }

--   splitAt-morphism : ‚àÄ {f m n} ‚Üí Morphism {f = f} (vec-applicative {_} {m + n})
--                                           (√ó-applicative (vec-applicative {_} {m}) (vec-applicative {_} {n}))
--   splitAt-morphism {f} {m} {n} = record
--     { op = splitAt‚Ä≤ m
--     ; op-pure = splitAt-pure
--     ; op-‚äõ = splitAt-‚äõ
--     }
--     where
--     splitAt-pure : {X : Set f} (x : X) ‚Üí splitAt‚Ä≤ m (replicate x) ‚â° replicate x , replicate x
--     splitAt-pure x = cong‚ÇÇ _,_ p‚ÇÅ p‚ÇÇ
--       where
--       p‚ÇÅ : proj‚ÇÅ (splitAt‚Ä≤ m (replicate {n = m + n} x)) ‚â° replicate {n = m} x
--       p‚ÇÅ rewrite sym (++-pure m {n} x) = splitAt-proj‚ÇÅ (replicate x) (replicate x)
--       p‚ÇÇ : proj‚ÇÇ (splitAt‚Ä≤ m (replicate {n = m + n} x)) ‚â° replicate {n = n} x
--       p‚ÇÇ rewrite sym (++-pure m {n} x) = splitAt-proj‚ÇÇ (replicate {n = m} x) (replicate x)
--     splitAt-‚äõ : {X Y : Set f} (fs : Vec (X ‚Üí Y) (m + n)) (xs : Vec X (m + n)) ‚Üí
--                 splitAt‚Ä≤ m (fs ‚äõ xs) ‚â° zip√ó _‚äõ_ _‚äõ_ (splitAt‚Ä≤ m fs) (splitAt‚Ä≤ m xs)
--     splitAt-‚äõ fs xs with splitAt m fs | splitAt m xs
--     ... | f‚ÇÅ  , f‚ÇÇ  , fp | x‚ÇÅ  , x‚ÇÇ  , xp rewrite fp | xp
--                                                 | sym (++-‚äõ f‚ÇÅ f‚ÇÇ x‚ÇÅ x‚ÇÇ)
--                                                 | splitAt-++ (f‚ÇÅ ‚äõ x‚ÇÅ) (f‚ÇÇ ‚äõ x‚ÇÇ) = refl

--   group-morphism : ‚àÄ {n} i (as : Vec ‚Ñï n) ‚Üí Morphism (vec-applicative {_} {size i as})
--                                                         (minGroups-applicative i as)
--   group-morphism i as = record
--     { op = group i as
--     ; op-pure = group-pure i as
--     ; op-‚äõ = group-‚äõ i as
--     }
--     where
--     module MGA {i : ‚Ñï} {n : ‚Ñï} {as : Vec ‚Ñï n} = RawApplicative (minGroups-applicative i as)

--     group-pure : ‚àÄ {n} i (as : Vec ‚Ñï n) {X : Set} (x : X) ‚Üí
--                     group i as (replicate x) ‚â° MGA.pure x
--     group-pure i [] x = refl
--     group-pure {suc n} i (a ‚à∑ as) {X} x with op-pure (splitAt-morphism {m = i + a} {size i as}) x
--     ... | sa-pure rewrite cong proj‚ÇÅ sa-pure | cong proj‚ÇÇ sa-pure
--       = cong (_‚à∑_ _) (group-pure i as x)

--     group-‚äõ : ‚àÄ i {n} (as : Vec ‚Ñï n) {X Y : Set} (fs : Vec (X ‚Üí Y) (size i as)) (xs : Vec X (size i as))
--                  ‚Üí group i as (fs ‚äõ xs) ‚â° (group i as fs) MGA.‚äõ (group i as xs)
--     group-‚äõ i [] [] [] = refl
--     group-‚äõ i (a ‚à∑ as) fs xs with op-‚äõ (splitAt-morphism {m = i + a} {size i as}) fs xs
--     ... | sa-‚äõ rewrite cong proj‚ÇÅ sa-‚äõ | cong proj‚ÇÇ sa-‚äõ
--       = cong (_‚à∑_ _) (group-‚äõ i as (proj‚ÇÇ (splitAt‚Ä≤ (i + a) fs)) (proj‚ÇÇ (splitAt‚Ä≤ (i + a) xs)))

--   ungroup-morphism : ‚àÄ {i n} {as : Vec ‚Ñï n} ‚Üí Morphism (minGroups-applicative i as)
--                                                       (vec-applicative {_} {size i as})
--   ungroup-morphism {i} {as = as} = record
--     { op = ungroup
--     ; op-pure = ungroup-pure i as
--     ; op-‚äõ = ungroup-‚äõ i as
--     }
--     where
--     module MGA {i : ‚Ñï} {n : ‚Ñï} {as : Vec ‚Ñï n} = RawApplicative (minGroups-applicative i as)
--     ungroup-pure : ‚àÄ i {n} (as : Vec ‚Ñï n) ‚Üí {X : Set} (x : X) ‚Üí
--                   ungroup {i = i} {as = as} (MGA.pure x) ‚â° replicate x
--     ungroup-pure i [] x = refl
--     ungroup-pure i (a ‚à∑ as) x rewrite sym (++-pure (i + a) {size i as} x)
--       = cong (_++_ (replicate {n = i + a} x)) (ungroup-pure i as x)
    
--     ungroup-‚äõ : ‚àÄ i {n} (as : Vec ‚Ñï n) {X Y : Set} (fs : MinGroups (X ‚Üí Y) i as) (xs : MinGroups X i as) ‚Üí
--                ungroup (fs MGA.‚äõ xs) ‚â° ungroup fs ‚äõ ungroup xs
--     to-vec-‚äõ i [] [] [] = refl
--     to-vec-‚äõ i (a ‚à∑ as) (f ‚à∑ fs) (x ‚à∑ xs) rewrite sym (++-‚äõ f (to-vec fs) x (to-vec xs))
--       = cong (_++_ (f ‚äõ x)) (to-vec-‚äõ i as fs xs)

--   extract-morphism : ‚àÄ {i n} {as : Vec ‚Ñï n} ‚Üí Morphism (minGroups-applicative (suc i) as)
--                                   (√ó-applicative (vec-applicative {_} {n}) (minGroups-applicative i as))
--   extract-morphism = record
--     { op = extract
--     ; op-pure = extract-pure _
--     ; op-‚äõ = {!!}
--     }
--     where
--     module MGA (i : ‚Ñï) {n : ‚Ñï} (as : Vec ‚Ñï n) = RawApplicative (minGroups-applicative i as)
--     extract-pure : ‚àÄ {i n} (as : Vec ‚Ñï n) {X : Set} (x : X) ‚Üí extract (MGA.pure (suc i) as x) ‚â° (replicate x , MGA.pure i as x)
--     extract-pure [] x = refl
--     extract-pure (a ‚à∑ as) x = cong‚ÇÇ _,_ (cong‚ÇÇ _‚à∑_ {!!} {!!}) {!!}


--   -- insert-morphism


--   -- map√ó-morphism




  
--   in-morphism : ‚àÄ {n} (as : Vec ‚Ñï n) ‚Üí Morphism (vec-applicative {_} {size 1 as})
--                                                 (vec-applicative {_} {n + size 0 as})
--   in-morphism as = record
--     { op = in-table as
--     ; op-pure = in-pure as
--     ; op-‚äõ = in-‚äõ as
--     }
--     where
--     postulate
--       in-pure : ‚àÄ {n} (as : Vec ‚Ñï n) {X : Set} (x : X) ‚Üí in-table as (replicate x) ‚â° replicate x
--       in-‚äõ : ‚àÄ {n} (as : Vec ‚Ñï n) {X Y : Set} (fs : Vec (X ‚Üí Y) (size 1 as)) (xs : Vec (X) (size 1 as)) ‚Üí
--         in-table as (fs ‚äõ xs) ‚â° in-table as fs ‚äõ in-table as xs
    
--     -- in-pure : ‚àÄ {n} (as : Vec ‚Ñï n) {X : Set} (x : X) ‚Üí in-table as (replicate {n = size 1 as} x) ‚â° replicate {n = n + size 0 as} x
--     -- -- in-pure {n} as x with sym (replicate-++ n {size 0 as} x) | ++-splitAt (replicate {n = n} x) (replicate {n = size 0 as} x)
--     -- -- in-pure as x | r=r++r | proj‚ÇÅ , proj‚ÇÇ 
--     -- -- in-pure [] x = refl
--     -- -- in-pure {suc n} (a ‚à∑ as) x with splitAt a (replicate {n = a + size 1 as} x)
--     -- -- in-pure {suc n} (a ‚à∑ as) x | proj‚ÇÅ , proj‚ÇÇ , proj‚ÇÉ rewrite proj‚ÇÉ = {!!}
--     -- in-pure [] x = refl
--     -- in-pure {suc n} (a ‚à∑ as) x with splitAt (1 + a) (replicate {n = 1 + a + size 1 as} x)
--     -- in-pure {suc n} (a ‚à∑ as) x | proj‚ÇÅ , proj‚ÇÇ , proj‚ÇÉ = begin
--     --   {!!}
--     --     ‚â°‚ü® {!!} ‚ü©
--     --   replicate {n = 1 + (n + (a + size 0 as))} x
--     --     ‚àé
--     --   where open Relation.Binary.PropositionalEquality.‚â°-Reasoning
  
--     -- in-‚äõ : ‚àÄ {n} (as : Vec ‚Ñï n) {X Y : Set} (fs : Vec (X ‚Üí Y) (size 1 as)) (xs : Vec (X) (size 1 as)) ‚Üí
--     --   in-table as (fs ‚äõ xs) ‚â° in-table as fs ‚äõ in-table as xs
--     -- in-‚äõ = {!!}
    
--   out-morphism : ‚àÄ {n} (as : Vec ‚Ñï n) ‚Üí Morphism (vec-applicative {_} {n + size 0 as})
--                                                  (vec-applicative {_} {size 1 as})
--   out-morphism as = record
--     { op = out-table as
--     ; op-pure = out-pure as
--     ; op-‚äõ = out-‚äõ as
--     }
--     where
--     postulate
--       out-pure : ‚àÄ {n} (as : Vec ‚Ñï n) {X : Set} (x : X) ‚Üí out-table as (replicate x) ‚â° replicate x
--       out-‚äõ : ‚àÄ {n} (as : Vec ‚Ñï n) {X Y : Set} (fs : Vec (X ‚Üí Y) (n + size 0 as)) (xs : Vec (X) (n + size 0 as)) ‚Üí
--         out-table as (fs ‚äõ xs) ‚â° out-table as fs ‚äõ out-table as xs
  
--   IdentityApplicative : ‚àÄ {f} ‚Üí RawApplicative {f = f} id
--   IdentityApplicative = RawMonad.rawIApplicative IdentityMonad
--     where
--     open import Category.Monad
--     open import Category.Monad.Identity
  
--   lookup-in-morphism : ‚àÄ {n} (as : Vec ‚Ñï n) i ‚Üí Morphism (vec-applicative {_} {size 1 as})
--                                                           (IdentityApplicative)
--   lookup-in-morphism as i = morphism-‚àò (lookup-morphism i) (in-morphism as)

--   lookup-out-morphism : ‚àÄ {n} (as : Vec ‚Ñï n) i ‚Üí Morphism (vec-applicative {_} {n + size 0 as})
--                                                           (IdentityApplicative)
--   lookup-out-morphism as i = morphism-‚àò (lookup-morphism i) (out-morphism as)
  
--   out-in-identity : ‚àÄ {n} (as : Vec ‚Ñï n) i ‚Üí in-‚§™ as (out-‚§™ as i) ‚â° i
--   out-in-identity {n} as i = begin
--     in-‚§™ as (lookup i (out-table as _))
--       ‚â°‚ü® sym (op-<$> (lookup-out-morphism as i) (in-‚§™ as) _) ‚ü©
--     lookup i (out-table as (map (in-‚§™ as) _))
--       ‚â°‚ü®‚ü©
--     lookup i (out-table as (map (flip lookup (in-table as _)) _))
--       ‚â°‚ü® cong (lookup i ‚àò out-table as) (map-lookup-allFin (in-table as _)) ‚ü©
--     lookup i (out-table as (in-table as _))
--       ‚â°‚ü® cong (lookup i) (out-in-table-identity as _) ‚ü©
--     lookup i _
--       ‚â°‚ü® lookup-allFin i ‚ü©
--     i
--       ‚àé
--     where
--     open Relation.Binary.PropositionalEquality.‚â°-Reasoning

