open import PiWare.Atom using (Atomic; module Atomic)
open import PiWare.Gates using (Gates)

module PiWarePrefixes.Plugs.Core {At : Atomic} {Gt : Gates At} where

open import Data.Fin using (Fin; to‚Ñï)
open import Data.Nat using (‚Ñï; zero; suc; _+_; _*_; _‚âü_)
open import Data.Nat.DivMod using (DivMod; _divMod_; _mod_)
open import Data.Nat.Properties.Simple using (*-right-zero)
open import Data.Vec using (lookup; allFin; tabulate; map) renaming (applicative to vec-applicative)
open import Data.Vec.Properties using (lookup-morphism; tabulate‚àòlookup; map-lookup-allFin)
open import Data.Unit using (tt)
open import Function using (id; flip; _‚àò_)
open import Relation.Nullary using (yes; no)
open import Relation.Nullary.Decidable using (False; fromWitnessFalse)
open import Relation.Binary.PropositionalEquality using (_‚â°_; sym; refl; cong)

open import PiWare.Circuit {Gt = Gt} using (ùêÇ; Plug)
open import PiWare.Interface using (Ix)
open import PiWare.Plugs Gt using (id‚§®)
open import PiWare.Simulation Gt using (‚ü¶_‚üß)
open import PiWarePrefixes.Utils

open Atomic At using (W)
open Morphism using (op;  op-<$>)

‚â¢0-*-‚â¢0 : ‚àÄ n m ‚Üí False (n ‚âü 0) ‚Üí False (m ‚âü 0) ‚Üí False (n * m ‚âü 0)
‚â¢0-*-‚â¢0 zero m () _
‚â¢0-*-‚â¢0 (suc n) zero _ ()
‚â¢0-*-‚â¢0 (suc n) (suc m) _ _ = tt

{-
zip‚§® : ‚àÄ {k n} ‚Üí ùêÇ (k * n) (n * k)
zip‚§® {k} {n} = p k n
  where
  p : ‚àÄ k n ‚Üí ùêÇ (k * n) (n * k)
  p k n with k ‚âü 0 | n ‚âü 0
  p k n | yes k‚â°0 | _        rewrite k‚â°0 | *-right-zero n = Plug id
  p k n | no k‚â¢0  | yes n‚â°0  rewrite n‚â°0 | *-right-zero k = Plug id
  p k n | no k‚â¢0  | no n‚â¢0   = Plug (finZip (fromWitnessFalse n‚â¢0) (fromWitnessFalse k‚â¢0))
    where
    -- We use _mod_ to make it a Fin (k * n), but it should actually already be in the range.
    -- From o<n*k and o=r+q*k (from DivMod) it follows that q<n. Then because r<k (from DivMod)
    -- we can deduce that n*r+q<n*k.
    finZip : False (n ‚âü 0) ‚Üí False (k ‚âü 0) ‚Üí Fin (n * k) ‚Üí Fin (k * n)
    finZip n‚â¢0 k‚â¢0 o = _mod_ val (k * n) {‚â¢0-*-‚â¢0 k n k‚â¢0 n‚â¢0}
      where
      dm : DivMod (to‚Ñï o) k
      dm = (to‚Ñï o divMod k) {k‚â¢0}
      val = n * to‚Ñï (DivMod.remainder dm) + DivMod.quotient dm
-}

plug-FM : ‚àÄ {i o} ‚Üí Morphism (vec-functor i) (vec-functor o) ‚Üí ùêÇ i o
plug-FM M = Plug (op M (allFin _))

plug-FM-‚ü¶‚üß : ‚àÄ {i o} (M : Morphism (vec-functor i) (vec-functor o)) (w : W i) ‚Üí
             ‚ü¶ plug-FM M ‚üß w ‚â° op M w
plug-FM-‚ü¶‚üß {i} M w = begin
  tabulate (Œª fin ‚Üí flip lookup w (lookup fin (op M (allFin _))))
    ‚â°‚ü® tabulate-extensionality (Œª fin ‚Üí sym (op-<$> (AM-to-FM (lookup-morphism fin)) (flip lookup w) _)) ‚ü©
  tabulate (Œª fin ‚Üí lookup fin (map (flip lookup w) (op M (allFin _))))
    ‚â°‚ü® tabulate-extensionality (Œª fin ‚Üí sym (cong (lookup fin) (op-<$> M (flip lookup w) _))) ‚ü©
  tabulate (Œª fin ‚Üí lookup fin (op M (map (flip lookup w) (allFin _))))
    ‚â°‚ü® tabulate‚àòlookup _ ‚ü©
  op M (map (flip lookup w) (allFin _))
    ‚â°‚ü® cong (op M) (map-lookup-allFin _) ‚ü©
  op M w
    ‚àé
  where
  open Relation.Binary.PropositionalEquality.‚â°-Reasoning

rewire‚§® : ‚àÄ {i o} ‚Üí (p : i ‚â° o) ‚Üí ùêÇ i o
rewire‚§® refl = id‚§®
