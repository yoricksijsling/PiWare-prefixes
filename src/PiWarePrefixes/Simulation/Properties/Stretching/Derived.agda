open import PiWare.Atom using (Atomic; module Atomic)
open import PiWare.Gates using (Gates)

module PiWarePrefixes.Simulation.Properties.Stretching.Derived {At : Atomic} (Gt : Gates At) where

open import Data.Nat using (‚Ñï; zero; suc; _+_)
open import Data.Product using (proj‚ÇÅ; proj‚ÇÇ; _,_; ,_; <_,_>)
open import Data.Vec using (Vec; _++_; _‚à∑_; []; [_]; _‚à∑ ≥_; replicate; splitAt)
                     renaming (sum to sum·µ•; map to map·µ•)
open import PiWarePrefixes.MinGroups using (size)
open import PiWare.Circuit {Gt = Gt} using (‚ÑÇ; ùêÇ; Plug; _‚ü´_; _‚à•_; œÉ)
open import PiWarePrefixes.Circuit.Context.Core Gt
open import PiWarePrefixes.Patterns.HetSeq {Gt = Gt}
open import PiWarePrefixes.Patterns.Stretch {Gt = Gt} as Stretch
  using (_‚§ö_; ‚§ö-direction; _‚§ô_; ‚§ô-direction; _‚§õ_; _‚§ú_; Stretching-‚ÑÇ; par-stretching)
open import PiWare.Plugs Gt using (id‚§®)
open import PiWarePrefixes.Plugs.Core {Gt = Gt} using (rewire‚§®)
open import PiWarePrefixes.Simulation.Equality.Core {Gt = Gt} as SimEq
  renaming (‚âà‚ü¶‚üß-refl to refl; ‚âà‚ü¶‚üß-sym to sym)
open import PiWarePrefixes.Simulation.Properties Gt
open import PiWarePrefixes.Simulation.Properties.HetSeq Gt
open import PiWarePrefixes.Simulation.Properties.Stretching Gt
open import PiWarePrefixes.Utils using (map-replicate)
open import Relation.Binary.PropositionalEquality as P using (_‚â°_)

private
  import Data.Vec.Equality
  import Data.Vec.Equality.Indexed
  module VE = Data.Vec.Equality.PropositionalEquality
  open VE using ([]-cong; _‚à∑-cong_)
  module VES = Data.Vec.Equality.Indexed.Equality (reindexed-‚âà‚ü¶‚üß-setoid (< suc , suc >))
  open VES using ([]-cong; _‚à∑-cong_)

open Atomic At using (W)

-- Derived stretch law 1
-- f ‚§ô x ++ [j + k] = (f ‚§ô x ++ [j]) √ó id{k}
stretch-derived-1 : ‚àÄ {n j k} (f : ‚ÑÇ (suc n) (suc n)) (xs : Vec ‚Ñï n) ‚Üí
                    f ‚§ô (xs ‚à∑ ≥ (j + k)) ‚âà‚ü¶‚üß (f ‚§ô (xs ‚à∑ ≥ j)) ‚à• id‚§® {k}
stretch-derived-1 {n} {j} {k} f xs = begin
  f ‚§ô (xs ‚à∑ ≥ (j + k))
    ‚âà‚ü¶‚üß‚ü® sym (‚à•-left-identity _) ‚ü©
  (id‚§® {0}) ‚à• (f ‚§ô (xs ‚à∑ ≥ (j + k)))
    ‚âà‚ü¶‚üß‚ü® stretch-flip f xs ‚ü©
  (0 ‚à∑ xs) ‚§ö f ‚à• id‚§® {j + k}
    ‚âà‚ü¶‚üß‚ü® refl ‚à•-cong (sym ‚à•-id‚§®) ‚ü©
  (0 ‚à∑ xs) ‚§ö f ‚à• id‚§® {j} ‚à• id‚§® {k}
    ‚âà‚ü¶‚üß‚ü® sym (‚à•-assoc _ _ _) ‚ü©
  ((0 ‚à∑ xs) ‚§ö f ‚à• id‚§® {j}) ‚à• id‚§® {k}
    ‚âà‚ü¶‚üß‚ü® (sym (stretch-flip f xs)) ‚à•-cong refl ‚ü©
  (id‚§® {0} ‚à• f ‚§ô (xs ‚à∑ ≥ j)) ‚à• id‚§® {k}
    ‚âà‚ü¶‚üß‚ü® (‚à•-left-identity _) ‚à•-cong refl ‚ü©
  f ‚§ô (xs ‚à∑ ≥ j) ‚à• id‚§® {k}
    ‚àé
  where
  open SimEq.‚âà‚ü¶‚üß-Reasoning

-- Derived stretch law 2
-- (f √ó id{#y-1}) ‚§ô x ++ y = f ‚§ô x ++ [Œ£y]
stretch-derived-2 : ‚àÄ {n m} (f : ‚ÑÇ (suc n) (suc n)) (xs : Vec ‚Ñï n) (y : ‚Ñï) (ys : Vec ‚Ñï m) ‚Üí
                    (f ‚à• id‚§® {m}) ‚§ô ((xs ‚à∑ ≥ y) ++ ys) ‚âà‚ü¶‚üß f ‚§ô (xs ‚à∑ ≥ y + size 1 ys)
stretch-derived-2 {n} {m} f xs y ys = begin
  (f ‚à• id‚§® {m}) ‚§ô ((xs ‚à∑ ≥ y) ++ ys)
    ‚âà‚ü¶‚üß‚ü® ‚§ô-‚à•-distrib (xs ‚à∑ ≥ y) ys f id‚§® ‚ü©
  f ‚§ô (xs ‚à∑ ≥ y) ‚à• id‚§® {m} ‚§ô ys
    ‚âà‚ü¶‚üß‚ü® refl ‚à•-cong (‚§ô-preserves-id ys) ‚ü©
  f ‚§ô (xs ‚à∑ ≥ y) ‚à• id‚§® {size 1 ys}
    ‚âà‚ü¶‚üß‚ü® sym (stretch-derived-1 f xs) ‚ü©
  f ‚§ô (xs ‚à∑ ≥ y + size 1 ys)
    ‚àé
  where
  open SimEq.‚âà‚ü¶‚üß-Reasoning

par-stretching-cong : ‚àÄ {m n} {cs : Vec Stretching-‚ÑÇ m} {ds : Vec Stretching-‚ÑÇ n} ‚Üí
                      cs VES.‚âà ds ‚Üí par-stretching cs ‚âà‚ü¶‚üß par-stretching ds
par-stretching-cong []-cong = refl
par-stretching-cong {cs = (i , c) ‚à∑ cs} {(j , d) ‚à∑ ds} (c‚âàd ‚à∑-cong cs‚âàds) = c‚âàd ‚à•-cong (par-stretching-cong cs‚âàds)

_‚§õ-cong_ : ‚àÄ {m n} {f : ‚ÑÇ m m} {g : ‚ÑÇ n n} {cs : Vec Stretching-‚ÑÇ m} {ds : Vec Stretching-‚ÑÇ n} ‚Üí
          f ‚âà‚ü¶‚üß g ‚Üí cs VES.‚âà ds ‚Üí f ‚§õ cs ‚âà‚ü¶‚üß g ‚§õ ds
_‚§õ-cong_ {f = f} {g} {cs} {ds} f‚âàg cs‚âàds = (f‚âàg ‚§ô-cong lem cs‚âàds) ‚ü´-cong (par-stretching-cong cs‚âàds) 
  where
  lem : ‚àÄ {m n} {cs : Vec Stretching-‚ÑÇ m} {ds : Vec Stretching-‚ÑÇ n} ‚Üí
        cs VES.‚âà ds ‚Üí map·µ• proj‚ÇÅ cs VE.‚âà map·µ• proj‚ÇÅ ds
  lem []-cong = []-cong
  lem ((Mk‚âà‚ü¶‚üß P.refl f‚âàg) ‚à∑-cong cs‚âàds) = P.refl ‚à∑-cong lem cs‚âàds

‚§õ-on-identity : ‚àÄ {n} (cs : Vec Stretching-‚ÑÇ n) ‚Üí
                 id‚§® {n} ‚§õ cs ‚âà‚ü¶‚üß par-stretching cs
‚§õ-on-identity {n} cs = begin
  id‚§® {n} ‚§ô map·µ• proj‚ÇÅ cs ‚ü´ par-stretching cs
    ‚âà‚ü¶‚üß‚ü® (‚§ô-preserves-id _) ‚ü´-cong refl ‚ü©
  id‚§® {size 1 (map·µ• proj‚ÇÅ cs)} ‚ü´ par-stretching cs
    ‚âà‚ü¶‚üß‚ü® ‚ü´-left-identity _ ‚ü©
  par-stretching cs
    ‚àé
  where
  open SimEq.‚âà‚ü¶‚üß-Reasoning

‚§õ-by-identity : ‚àÄ {n} (f : ‚ÑÇ n n) ‚Üí f ‚§õ (replicate (, id‚§® {1})) ‚âà‚ü¶‚üß f
‚§õ-by-identity {n} f = begin
  f ‚§ô map·µ• proj‚ÇÅ (replicate (, id‚§® {1})) ‚ü´ par-stretching {n} (replicate (, id‚§® {1}))
    ‚âà‚ü¶‚üß‚ü® refl ‚ü´[-cong (par-ids=id n) ‚ü©
  f ‚§ô map·µ• proj‚ÇÅ (replicate (, id‚§® {1})) ‚ü´[] id‚§® {n}
    ‚âà‚ü¶‚üß‚ü® ‚ü´[]-right-identity _ ‚ü©
  f ‚§ô map·µ• proj‚ÇÅ (replicate (, id‚§® {1}))
    ‚âà‚ü¶‚üß‚ü® refl ‚§ô-cong (VE.from-‚â° (map-replicate proj‚ÇÅ (, id‚§® {1}))) ‚ü©
  f ‚§ô replicate 0
    ‚âà‚ü¶‚üß‚ü® ‚§ô-by-identity f ‚ü©
  f
    ‚àé
  where
  open SimEq.‚âà‚ü¶‚üß-Reasoning
  par-ids=id : ‚àÄ n ‚Üí par-stretching {n} (replicate (, id‚§® {1})) ‚âà‚ü¶‚üß id‚§® {n}
  par-ids=id zero = refl
  par-ids=id (suc n) = begin
    id‚§® {1} ‚à• par-stretching {n} (replicate (, id‚§® {1}))
      ‚âà‚ü¶‚üß‚ü® refl ‚à•-cong par-ids=id n ‚ü©
    id‚§® {1} ‚à• id‚§® {n}
      ‚âà‚ü¶‚üß‚ü® ‚à•-id‚§® ‚ü©
    id‚§® {suc n}
      ‚àé
