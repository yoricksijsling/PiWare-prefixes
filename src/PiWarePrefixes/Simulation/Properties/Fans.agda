open import PiWare.Atom using (Atomic; module Atomic)
open import PiWare.Gates using (Gates)
open import PiWarePrefixes.Circuit.Monoid using (module ‚ÑÇ-Monoid; ‚ÑÇ-Monoid)

module PiWarePrefixes.Simulation.Properties.Fans {At : Atomic} {Gt : Gates At} {‚ÑÇ-monoid : ‚ÑÇ-Monoid {Gt = Gt}} where

open Atomic At using (Atom; W)
open ‚ÑÇ-Monoid ‚ÑÇ-monoid using (plus‚ÑÇ; plus‚ÑÇ-assoc)

open import PiWare.Atom using (module Atomic)
open import Data.Nat using (‚Ñï; zero; suc; _+_; _*_)
open import Data.Nat.Properties.Simple using (+-suc; +-right-identity; +-comm)
open import Data.Product using (‚àÉ; _,_; ,_; proj‚ÇÅ; proj‚ÇÇ; uncurry; uncurry‚Ä≤; <_,_>) renaming (map to map√ó)
open import Data.Vec using (Vec; []; _‚à∑_; _++_; [_]; sum; replicate; _‚à∑ ≥_; initLast)
                     renaming (map to map·µ•)
open import Data.Vec.Extra using (splitAt‚Ä≤)
open import Function using (id; _$_; _‚àò_; _‚ü®_‚ü©_)
open import PiWare.Circuit {Gt = Gt} using (‚ÑÇ; ùêÇ; œÉ; Gate; Plug; _‚ü´_; _‚à•_)
open import PiWarePrefixes.Circuit.Context.Core Gt
open import PiWarePrefixes.MinGroups using (size)
open import PiWarePrefixes.Patterns.Fan {plus‚ÑÇ = plus‚ÑÇ}
open import PiWarePrefixes.Patterns.HetSeq {Gt = Gt}
open import PiWarePrefixes.Patterns.Stretch {Gt = Gt} using (_‚§ô_; Stretching-‚ÑÇ; par-stretching; _‚§õ_)
open import PiWare.Plugs Gt using (id‚§®)
open import PiWarePrefixes.Plugs.Core {Gt = Gt} using (rewire‚§®; plug-FM; plug-FM-‚ü¶‚üß)
open import PiWare.Simulation Gt using (‚ü¶_‚üß; W‚ü∂W)
open import PiWarePrefixes.Simulation.Equality.Core {Gt = Gt} as SimEq
  renaming (‚âà‚ü¶‚üß-refl to refl; ‚âà‚ü¶‚üß-sym to sym; ‚âà‚ü¶‚üß-trans to trans)
open import PiWarePrefixes.Simulation.Properties Gt
open import PiWarePrefixes.Simulation.Properties.HetSeq Gt
open import PiWarePrefixes.Simulation.Properties.Stretching Gt
open import PiWarePrefixes.Simulation.Properties.Stretching.Derived Gt
open import PiWarePrefixes.Utils using ( initLast‚Ä≤; drop-initLast‚Ä≤; map-cong; map-replicate; ++-‚à∑ ≥
                                       ; module Morphism; splitAt‚Ä≤-++)
open import Relation.Binary.PropositionalEquality as P using (_‚â°_; cong; cong‚ÇÇ)

private
  import Data.Vec.Equality
  import Data.Vec.Equality.Indexed
  module VE = Data.Vec.Equality.PropositionalEquality
  open VE using ([]-cong; _‚à∑-cong_)
  module VES = Data.Vec.Equality.Indexed.Equality (reindexed-‚âà‚ü¶‚üß-setoid (< suc , suc >))
  open VES using ([]-cong; _‚à∑-cong_)
  import Data.Vec.Properties
  module PVE {a} {A : Set a} = Data.Vec.Properties.UsingVectorEquality (P.setoid A)


open Morphism using (op; op-<$>)

fan-plus-to-spec : ‚àÄ n (w : W (suc n)) ‚Üí ‚ü¶ fan-plus n ‚üß w ‚â° fan-plus-spec n w
fan-plus-to-spec n (x ‚à∑ xs) = begin
  ‚ü¶ fan-plus n ‚üß (x ‚à∑ xs)
    ‚â°‚ü®‚ü©
  (‚ü¶ id‚§® {n} ‚à• plus‚ÑÇ ‚üß ‚àò ‚ü¶ plug-FM (fan-plus-prepare-M n) ‚üß) (x ‚à∑ xs)
    ‚â°‚ü® cong ‚ü¶ id‚§® {n} ‚à• plus‚ÑÇ ‚üß (plug-FM-‚ü¶‚üß (fan-plus-prepare-M n) (x ‚à∑ xs)) ‚ü©
  (‚ü¶ id‚§® {n} ‚à• plus‚ÑÇ ‚üß ‚àò op (fan-plus-prepare-M n)) (x ‚à∑ xs)
    ‚â°‚ü®‚ü©
  (uncurry‚Ä≤ _++_ ‚àò map√ó ‚ü¶ id‚§® {n} ‚üß ‚ü¶ plus‚ÑÇ ‚üß ‚àò splitAt‚Ä≤ n ‚àò op (fan-plus-prepare-M n)) (x ‚à∑ xs)
    ‚â°‚ü® cong‚ÇÇ _++_ (id‚§®-id ((proj‚ÇÅ ‚àò splitAt‚Ä≤ n ‚àò op (fan-plus-prepare-M n)) (x ‚à∑ xs))) P.refl ‚ü©
  (uncurry‚Ä≤ _++_ ‚àò map√ó id ‚ü¶ plus‚ÑÇ ‚üß ‚àò splitAt‚Ä≤ n ‚àò op (fan-plus-prepare-M n)) (x ‚à∑ xs)
    ‚â°‚ü®‚ü©
  (uncurry‚Ä≤ _++_ ‚àò map√ó id ‚ü¶ plus‚ÑÇ ‚üß ‚àò splitAt‚Ä≤ n ‚àò uncurry‚Ä≤ _++_ ‚àò map√ó id (Œª y ‚Üí x ‚à∑ y ‚à∑ []) ‚àò initLast‚Ä≤) (x ‚à∑ xs)
    ‚â°‚ü® cong (uncurry‚Ä≤ _++_ ‚àò map√ó id ‚ü¶ plus‚ÑÇ ‚üß) (splitAt‚Ä≤-++ (proj‚ÇÅ (initLast‚Ä≤ (x ‚à∑ xs))) _) ‚ü©
  (uncurry‚Ä≤ _++_ ‚àò map√ó id ‚ü¶ plus‚ÑÇ ‚üß ‚àò map√ó id (Œª y ‚Üí x ‚à∑ y ‚à∑ []) ‚àò initLast‚Ä≤) (x ‚à∑ xs)
    ‚â°‚ü® cong (_++_ (proj‚ÇÅ (initLast‚Ä≤ (x ‚à∑ xs)))) (singleton-‚äï x (proj‚ÇÇ (initLast‚Ä≤ (x ‚à∑ xs)))) ‚ü©
  (uncurry‚Ä≤ _++_ ‚àò map√ó id (Œª y ‚Üí [ x ‚äï y ]) ‚àò initLast‚Ä≤) (x ‚à∑ xs)
    ‚àé
  where
  open P.‚â°-Reasoning
  singleton-‚äï : ‚àÄ x y ‚Üí ‚ü¶ plus‚ÑÇ ‚üß (x ‚à∑ y ‚à∑ []) ‚â° [ x ‚äï y ]
  singleton-‚äï x y with ‚ü¶ plus‚ÑÇ ‚üß (x ‚à∑ y ‚à∑ [])
  singleton-‚äï x y | r ‚à∑ [] = P.refl

private
  fan-spec-combine : ‚àÄ {n} x (xs : W (suc n)) ‚Üí
         fan-spec (x ‚à∑ proj‚ÇÅ (initLast‚Ä≤ xs)) ++ [ x ‚äï (proj‚ÇÇ (initLast‚Ä≤ xs)) ] VE.‚âà fan-spec (x ‚à∑ xs)
  fan-spec-combine x xs = P.refl ‚à∑-cong helper (_‚äï_ x) xs
    where
    helper : ‚àÄ {A B : Set} {n} (f : A ‚Üí B) (xs : Vec A (suc n)) ‚Üí map·µ• f (proj‚ÇÅ (initLast‚Ä≤ xs)) ++ [ f (proj‚ÇÇ (initLast‚Ä≤ xs)) ] VE.‚âà map·µ• f xs
    helper {n = zero} f (x ‚à∑ []) = VE.refl (f x ‚à∑ [])
    helper {n = suc n} f (x ‚à∑ xs) with initLast xs
    helper {A} {B} {suc n} f (x ‚à∑ .(ys ‚à∑ ≥ y)) | ys , y , P.refl = P.refl ‚à∑-cong
        (VE.sym (PVE.map-++-commute f ys {[ y ]}) ‚ü® VE.trans ‚ü© map-cong f (VE.sym (++-‚à∑ ≥ ys y)))

mutual
  fan‚Ä≤-to-spec : ‚àÄ n (w : W n) ‚Üí ‚ü¶ fan‚Ä≤ n ‚üß w VE.‚âà fan-spec w
  fan‚Ä≤-to-spec 0 [] = VE.refl []
  fan‚Ä≤-to-spec 1 (x ‚à∑ []) = VE.refl [ x ]
  fan‚Ä≤-to-spec (suc (suc n)) (x ‚à∑ xs) = VE.from-‚â° (fan‚Ä≤-to-part-of-spec (fan-to-spec (suc n))) ‚ü® VE.trans ‚ü© fan-spec-combine x xs
    where
    open P.‚â°-Reasoning
    fa : W‚ü∂W (suc n + 1) (suc n + 1)
    fa = ‚ü¶ fan (suc n) ‚à• id‚§® ‚üß

    fan‚Ä≤-to-part-of-spec : ((w : W (suc n)) ‚Üí ‚ü¶ fan (suc n) ‚üß w ‚â° fan-spec w) ‚Üí
      ‚ü¶ fan‚Ä≤ (2 + n) ‚üß (x ‚à∑ xs) ‚â° fan-spec (x ‚à∑ proj‚ÇÅ (initLast‚Ä≤ xs)) ++ [ x ‚äï proj‚ÇÇ (initLast‚Ä≤ xs) ]
    fan‚Ä≤-to-part-of-spec rec = begin
      ‚ü¶ fan-plus (suc n) ‚ü´ fan (suc n) ‚à• id‚§® {1} ‚üß (x ‚à∑ xs)
        ‚â°‚ü®‚ü©
      (fa ‚àò ‚ü¶ fan-plus (suc n) ‚üß) (x ‚à∑ xs)
        ‚â°‚ü® cong fa (fan-plus-to-spec (suc n) (x ‚à∑ xs)) ‚ü©
      (fa ‚àò uncurry‚Ä≤ _++_ ‚àò map√ó id (Œª y ‚Üí [ x ‚äï y ]) ‚àò initLast‚Ä≤) (x ‚à∑ xs)
        ‚â°‚ü® cong (fa ‚àò uncurry‚Ä≤ _++_ ‚àò map√ó id (Œª y ‚Üí [ x ‚äï y ])) (drop-initLast‚Ä≤ x xs) ‚ü©
      (fa ‚àò uncurry‚Ä≤ _++_ ‚àò map√ó (_‚à∑_ x) (Œª y ‚Üí [ x ‚äï y ]) ‚àò initLast‚Ä≤) xs
       ‚â°‚ü®‚ü©
      (uncurry‚Ä≤ _++_ ‚àò map√ó ‚ü¶ fan (suc n) ‚üß ‚ü¶ id‚§® ‚üß ‚àò splitAt‚Ä≤ (suc n) ‚àò
       uncurry‚Ä≤ _++_ ‚àò map√ó (_‚à∑_ x) (Œª y ‚Üí [ x ‚äï y ]) ‚àò initLast‚Ä≤) xs
        ‚â°‚ü® cong (uncurry‚Ä≤ _++_ ‚àò map√ó ‚ü¶ fan (suc n) ‚üß ‚ü¶ id‚§® ‚üß)
                (splitAt‚Ä≤-++ (x ‚à∑ (proj‚ÇÅ (initLast‚Ä≤ xs))) _) ‚ü©
      (uncurry‚Ä≤ _++_ ‚àò map√ó (‚ü¶ fan (suc n) ‚üß ‚àò _‚à∑_ x)
                            (‚ü¶ id‚§® ‚üß ‚àò (Œª y ‚Üí [ x ‚äï y ])) ‚àò initLast‚Ä≤) xs
        ‚â°‚ü® cong‚ÇÇ _++_ (rec (x ‚à∑ proj‚ÇÅ (initLast‚Ä≤ xs)))
                      (id‚§®-id [ x ‚äï proj‚ÇÇ (initLast‚Ä≤ xs) ]) ‚ü©
      (uncurry‚Ä≤ _++_ ‚àò map√ó (fan-spec {suc n} ‚àò _‚à∑_ x)
                            (Œª y ‚Üí [ x ‚äï y ]) ‚àò initLast‚Ä≤) xs
        ‚â°‚ü®‚ü©
      fan-spec (x ‚à∑ proj‚ÇÅ (initLast‚Ä≤ xs)) ++ [ x ‚äï proj‚ÇÇ (initLast‚Ä≤ xs) ]
        ‚àé

  fan-to-spec : ‚àÄ n (w : W n) ‚Üí ‚ü¶ fan n ‚üß w ‚â° fan-spec w
  fan-to-spec n w with ‚ü´[]-right-identity (fan‚Ä≤ n) {swap‚Ñï-id n}
  fan-to-spec n w | Mk‚âà‚ü¶‚üß pi fan‚âàfan‚Ä≤ = VE.to-‚â° (fan‚âàfan‚Ä≤ (VE.refl w) ‚ü® VE.trans ‚ü© fan‚Ä≤-to-spec n w)


fan-cong : ‚àÄ {m n} (p : m ‚â° n) ‚Üí fan m ‚âà‚ü¶‚üß fan n
fan-cong P.refl = refl

postulate
  fan-law-1 : ‚àÄ {n m} (f : Stretching-‚ÑÇ) (fs : Vec Stretching-‚ÑÇ m) (gs : Vec Stretching-‚ÑÇ n) ‚Üí
              (fan (suc n)) ‚§õ ((, fan (suc m) ‚§õ (f ‚à∑ fs)) ‚à∑ gs) ‚âà‚ü¶‚üß fan (suc m + n) ‚§õ ((f ‚à∑ fs) ++ gs)
-- fan-law-1 {n} {m} f fs gs = Mk‚âà‚ü¶‚üß pi helper
--   where
--     pi : size 1 (map·µ• proj‚ÇÅ (f ‚à∑ fs)) + size 1 (map·µ• proj‚ÇÅ gs) ‚â° size 1 (map·µ• proj‚ÇÅ (f ‚à∑ fs ++ gs))
--     helper : (fan (suc n)) ‚§õ ((, fan (suc m) ‚§õ (f ‚à∑ fs)) ‚à∑ gs) ‚âàe fan (suc m + n) ‚§õ ((f ‚à∑ fs) ++ gs)

fans : ‚àÄ {n p} (xs : Vec ‚Ñï n) ‚Üí Vec (Stretching-‚ÑÇ {p}) n
fans = map·µ• (Œª x ‚Üí x , fan (suc x))

postulate
  -- We need plus‚ÑÇ-assoc for this one
  fan-law-2‚Ä≤ : ‚àÄ {n} i (xs : Vec ‚Ñï n) ‚Üí
            par-stretching ((, id‚§® {suc i}) ‚à∑ fans xs) ‚ü´ fan (size 1 (i ‚à∑ map·µ• proj‚ÇÅ (fans xs)))
              ‚âà‚ü¶‚üß fan (1 + n) ‚§õ ((, fan (suc i)) ‚à∑ fans xs)
-- fan-law-2‚Ä≤ {n} i xs = easy-‚âà‚ü¶‚üß (VE.from-‚â° ‚àò helper)
--   where
--   open P.‚â°-Reasoning
--   helper : ‚àÄ w ‚Üí ‚ü¶ par-stretching ((, id‚§® {suc i}) ‚à∑ fans xs) ‚ü´ fan (size 1 (i ‚à∑ map·µ• proj‚ÇÅ (fans xs))) ‚üß w
--                ‚â° ‚ü¶ fan (1 + n) ‚§õ ((, fan (suc i)) ‚à∑ fans xs) ‚üß w
--   helper w = begin
--     ‚ü¶ par-stretching ((, id‚§® {suc i}) ‚à∑ fans xs) ‚ü´ fan (size 1 (i ‚à∑ map·µ• proj‚ÇÅ (fans xs))) ‚üß w
--       ‚â°‚ü® {!!} ‚ü©
--     {!!}
--       ‚â°‚ü® {!!} ‚ü©
--     {!!}
--       ‚â°‚ü® sym {!fan-to-spec!} ‚ü©
--     ‚ü¶ fan (1 + n) ‚§õ ((, fan (suc i)) ‚à∑ fans xs) ‚üß w
--       ‚àé

  

fan-law-2 : ‚àÄ {n} i (xs : Vec ‚Ñï n) ‚Üí
            id‚§® {1 + n} ‚§õ ((, id‚§® {suc i}) ‚à∑ fans xs) ‚ü´ fan (size 1 (i ‚à∑ map·µ• proj‚ÇÅ (fans xs)))
              ‚âà‚ü¶‚üß fan (1 + n) ‚§õ ((, fan (suc i)) ‚à∑ fans xs)
fan-law-2 {n} i xs = begin
  id‚§® ‚§õ ((, id‚§® {suc i}) ‚à∑ fans xs) ‚ü´ fan _
    ‚âà‚ü¶‚üß‚ü® ‚âà‚ü¶‚üß-cong (‚óè ‚óè‚ü´ refl) (‚§õ-on-identity _) ‚ü©
  par-stretching ((, id‚§® {suc i}) ‚à∑ fans xs) ‚ü´ fan _
    ‚âà‚ü¶‚üß‚ü® fan-law-2‚Ä≤ i xs ‚ü©
  fan (1 + n) ‚§õ ((, fan (suc i)) ‚à∑ fans xs)
    ‚àé
  where
  open SimEq.‚âà‚ü¶‚üß-Reasoning

binary-fan-law : ‚àÄ m n ‚Üí id‚§® {suc m} ‚à• fan (suc n) ‚ü´ fan (suc m + suc n)
    ‚âà‚ü¶‚üß fan (2 + m) ‚à• id‚§® {n} ‚ü´[ P.sym (+-suc (suc m) n) ] id‚§® {suc m} ‚à• fan (suc n)
binary-fan-law m n = begin
  id‚§® {suc m} ‚à• fan (suc n) ‚ü´ fan (suc m + suc n)
    ‚âà‚ü¶‚üß‚ü® (sym (‚à•-right-identity _) ‚ü® trans ‚ü© ‚à•-assoc _ _ _)
         ‚ü´-cong fan-cong (cong (_+_ (suc m) ‚àò suc) (P.sym (+-right-identity n))) ‚ü©
  id‚§® {suc m} ‚à• fan (suc n) ‚à• id‚§® {0} ‚ü´ fan (suc m + (suc n + 0))
    ‚âà‚ü¶‚üß‚ü® fan-law-2‚Ä≤ m [ n ] ‚ü©
  fan 2 ‚§õ ((, fan (suc m)) ‚à∑ [ , fan (suc n) ])
    ‚âà‚ü¶‚üß‚ü® refl ‚§õ-cong (sym (‚§õ-by-identity (fan (suc m))) ‚à∑-cong (refl ‚à∑-cong []-cong)) ‚ü©
  fan 2 ‚§õ ((, fan (suc m) ‚§õ ids) ‚à∑ [ , fan (suc n) ])
    ‚âà‚ü¶‚üß‚ü® fan-law-1 (, id‚§® {1}) ids [ , fan (suc n) ] ‚ü©
  fan (suc m + 1) ‚§õ (ids {suc m} ++ [ , fan (suc n) ])
    ‚âà‚ü¶‚üß‚ü®‚ü© -- left side
  fan (suc m + 1) ‚§ô map·µ• proj‚ÇÅ (ids {suc m} ++ [ , fan (suc n) ]) ‚ü´ _
    ‚âà‚ü¶‚üß‚ü® (fan-cong (+-comm (suc m) 1) ‚§ô-cong lem‚ÇÅ) ‚ü´[-cong refl ‚ü©
  fan (2 + m) ‚§ô (replicate 0 ‚à∑ ≥ n) ‚ü´[] _
    ‚âà‚ü¶‚üß‚ü® (stretch-derived-1 (fan (2 + m)) (replicate 0)) ‚ü´[]-cong refl ‚ü©
  (fan (2 + m) ‚§ô (replicate 0 ‚à∑ ≥ 0)) ‚à• id‚§® {n} ‚ü´[] _
    ‚âà‚ü¶‚üß‚ü® ((refl ‚§ô-cong (lem‚ÇÇ (suc m))) ‚à•-cong refl) ‚ü´[]-cong refl ‚ü©
  fan (2 + m) ‚§ô replicate 0 ‚à• id‚§® {n} ‚ü´[] _ 
    ‚âà‚ü¶‚üß‚ü® ((‚§ô-by-identity (fan (2 + m))) ‚à•-cong refl) ‚ü´[]-cong refl ‚ü©
  fan (2 + m) ‚à• id‚§® {n} ‚ü´[] _
    ‚âà‚ü¶‚üß‚ü®‚ü© -- right side
  _ ‚ü´[] par-stretching (ids {suc m} ++ [ , fan (suc n) ])
    ‚âà‚ü¶‚üß‚ü® refl ‚ü´[]-cong (lem‚ÇÉ (suc m)) ‚ü©
  _ ‚ü´[] id‚§® {suc m} ‚à• fan (suc n)
    ‚âà‚ü¶‚üß‚ü® ‚ü´[]-replace (P.sym (cong suc (+-suc m n))) ‚ü©
  _ ‚ü´[] _
    ‚àé
  where
  open SimEq.‚âà‚ü¶‚üß-Reasoning

  ids : ‚àÄ {n} ‚Üí Vec (Stretching-‚ÑÇ {œÉ}) n
  ids {_} = replicate (, id‚§® {1})

  lem‚ÇÅ : map·µ• proj‚ÇÅ (ids {suc m} ++ [ , fan (suc n) ]) VE.‚âà (replicate 0) ‚à∑ ≥ n
  lem‚ÇÅ =         PVE.map-++-commute proj‚ÇÅ (ids {suc m})
    ‚ü® VE.trans ‚ü© VE.from-‚â° (map-replicate {suc m} proj‚ÇÅ (0 , id‚§® {1})) VE.++-cong VE.refl [ n ]
    ‚ü® VE.trans ‚ü© VE.sym (++-‚à∑ ≥ (replicate {n = suc m} 0) n)

  lem‚ÇÇ : ‚àÄ n ‚Üí replicate {n = n} 0 ‚à∑ ≥ 0 VE.‚âà replicate {n = suc n} 0
  lem‚ÇÇ zero = P.refl ‚à∑-cong []-cong
  lem‚ÇÇ (suc n) = P.refl ‚à∑-cong lem‚ÇÇ n

  lem‚ÇÉ : ‚àÄ m ‚Üí par-stretching (ids {m} ++ [ , fan (suc n) ]) ‚âà‚ü¶‚üß id‚§® {m} ‚à• fan (suc n)
  lem‚ÇÉ zero = ‚à•-right-identity (fan (suc n)) ‚ü® trans ‚ü© sym (‚à•-left-identity (fan (suc n)))
  lem‚ÇÉ (suc m) = refl ‚à•-cong (lem‚ÇÉ m) ‚ü® trans ‚ü© sym (‚à•-assoc _ _ _) ‚ü® trans ‚ü© ‚à•-id‚§® ‚à•-cong refl
